name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

env:
  BUILD_TYPE: Release

jobs:
  # Job to bump version (manual trigger only)
  version-bump:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      run: |
        chmod +x scripts/version.sh
        # Set git info for version script
        export GIT_COMMIT_HASH=$(git rev-parse HEAD)
        export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        
        # Bump version automatically
        echo "y" | scripts/version.sh bump ${{ github.event.inputs.version_type }}

    - name: Push changes
      run: |
        git push origin main
        # Push the tag that was created
        NEW_VERSION=$(grep "#define CV_TO_OSC_VERSION_MAJOR" Version.h | awk '{print $3}').$(grep "#define CV_TO_OSC_VERSION_MINOR" Version.h | awk '{print $3}').$(grep "#define CV_TO_OSC_VERSION_PATCH" Version.h | awk '{print $3}')
        git push origin v$NEW_VERSION

  # Job to create release when tag is pushed
  create-release:
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    runs-on: ubuntu-latest
    needs: [version-bump]
    # Run this job even if version-bump is skipped (for tag pushes)
    if: always() && (startsWith(github.ref, 'refs/tags/v') || needs.version-bump.result == 'success')
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: cv_to_osc_converter_linux
            build_deps: |
              sudo apt-get update
              sudo apt-get install -y libportaudio2-dev liblo-dev nlohmann-json3-dev cmake pkg-config build-essential
          - os: macos-latest
            artifact_name: cv_to_osc_converter_macos
            build_deps: |
              brew install portaudio liblo nlohmann-json cmake pkg-config

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION=$(grep "#define CV_TO_OSC_VERSION_MAJOR" Version.h | awk '{print $3}').$(grep "#define CV_TO_OSC_VERSION_MINOR" Version.h | awk '{print $3}').$(grep "#define CV_TO_OSC_VERSION_PATCH" Version.h | awk '{print $3}')
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Install dependencies
      run: ${{ matrix.build_deps }}

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake with version info
      run: |
        cd build
        export GIT_COMMIT_HASH=$(git rev-parse HEAD)
        export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        export BUILD_DATE=$(date)
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DGIT_COMMIT_HASH="$GIT_COMMIT_HASH" \
          -DGIT_BRANCH="$GIT_BRANCH" \
          -DBUILD_DATE="$BUILD_DATE"

    - name: Build
      run: |
        cd build
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)

    - name: Run tests
      run: |
        cd build
        # Run basic test to ensure binary works
        ./cv_to_osc_converter --version || true
        
        # Run automated tests
        cd ..
        if [ -f "run_tests.sh" ]; then
          chmod +x run_tests.sh
          ./run_tests.sh
        fi

    - name: Package artifact
      run: |
        cd build
        strip cv_to_osc_converter 2>/dev/null || true  # Strip symbols if possible
        tar -czf ${{ matrix.artifact_name }}.tar.gz cv_to_osc_converter
        
        # Create additional files for the release
        cd ..
        cp README.md USER_GUIDE.md CHANGELOG.md LICENSE build/
        cd build
        tar -czf ${{ matrix.artifact_name }}_full.tar.gz cv_to_osc_converter README.md USER_GUIDE.md CHANGELOG.md LICENSE

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          build/${{ matrix.artifact_name }}.tar.gz
          build/${{ matrix.artifact_name }}_full.tar.gz

    - name: Generate release notes
      id: release_notes
      if: matrix.os == 'ubuntu-latest'
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        
        # Extract changelog for this version
        if [ -f "CHANGELOG.md" ]; then
          # Get content between current version and next version/end
          awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
          
          # If release notes are empty, create default ones
          if [ ! -s release_notes.md ]; then
            echo "## What's Changed" > release_notes.md
            echo "* Performance improvements and bug fixes" >> release_notes.md
          fi
        else
          echo "## What's Changed" > release_notes.md
          echo "* Release version $VERSION" >> release_notes.md
        fi
        
        # Add system information
        echo "" >> release_notes.md
        echo "## Download" >> release_notes.md
        echo "* **Linux**: cv_to_osc_converter_linux.tar.gz" >> release_notes.md
        echo "* **macOS**: cv_to_osc_converter_macos.tar.gz" >> release_notes.md
        echo "" >> release_notes.md
        echo "Full packages include documentation and examples." >> release_notes.md
        
        echo "Generated release notes:"
        cat release_notes.md

    - name: Create GitHub Release
      if: matrix.os == 'ubuntu-latest'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          build/cv_to_osc_converter_linux.tar.gz
          build/cv_to_osc_converter_linux_full.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS artifacts to release
      if: matrix.os == 'macos-latest'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        files: |
          build/cv_to_osc_converter_macos.tar.gz
          build/cv_to_osc_converter_macos_full.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}

  # Job to update development version after release
  post-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [create-release]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Set development version
      run: |
        chmod +x scripts/version.sh
        scripts/version.sh dev
        
        # Commit the development version
        git add Version.h
        git commit -m "chore: set development version after release" || true
        git push origin main || true
