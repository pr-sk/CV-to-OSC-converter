#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OSC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ableton Live
"""

import argparse
import time
from pythonosc import udp_client

def test_ableton_osc():
    # –°–æ–∑–¥–∞–µ–º OSC –∫–ª–∏–µ–Ω—Ç
    client = udp_client.SimpleUDPClient("127.0.0.1", 9000)
    
    print("üéπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OSC —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Ableton Live")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    print("\nüì® –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ /live/channel")
    for i in range(8):
        value = i / 7.0  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
        client.send_message(f"/live/channel/{i}", value)
        print(f"   –ö–∞–Ω–∞–ª {i}: {value:.2f}")
        time.sleep(0.1)
    
    # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
    print("\nüì® –¢–µ—Å—Ç 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é —Ç—Ä–µ–∫–æ–≤")
    for track in range(4):
        for vol in [0.0, 0.5, 1.0]:
            client.send_message(f"/live/track/{track}/volume", vol)
            print(f"   –¢—Ä–µ–∫ {track} –≥—Ä–æ–º–∫–æ—Å—Ç—å: {vol}")
            time.sleep(0.2)
    
    # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ MIDI CC —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OSC
    print("\nüì® –¢–µ—Å—Ç 3: MIDI CC —á–µ—Ä–µ–∑ OSC")
    for cc in range(1, 5):
        for value in range(0, 128, 32):
            client.send_message(f"/live/midi/cc/{cc}", value)
            print(f"   CC{cc}: {value}")
            time.sleep(0.1)
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ RMS –∑–Ω–∞—á–µ–Ω–∏–π
    print("\nüì® –¢–µ—Å—Ç 4: –≠–º—É–ª—è—Ü–∏—è RMS —Å–∏–≥–Ω–∞–ª–∞")
    import math
    for i in range(100):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ RMS
        rms_value = (math.sin(i * 0.1) + 1) / 2
        client.send_message("/live/rms/0", rms_value)
        print(f"\r   RMS: {'‚ñà' * int(rms_value * 20):<20} {rms_value:.2f}", end='')
        time.sleep(0.05)
    
    print("\n\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç OSC –¥–ª—è Ableton')
    args = parser.parse_args()
    
    test_ableton_osc()
